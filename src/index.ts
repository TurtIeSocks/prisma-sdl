import { ES5_MODULE, TS_UTILITIES } from './assets/constants'
import { getModels } from './services/getModels'
import { getSchemas } from './services/getSchemas'
import { writeFiles } from './services/writeFiles'
import { writeSafe } from './services/writeSafe'
import { gqlContext } from './templates/context/context'
import { allResolvers } from './templates/resolvers/resolvers'
import { allTypeDefs } from './templates/typeDefs/typeDefs'

import type { Options, ReturnObj } from './assets/types'

export function prismaSdl({
  root = process.cwd(),
  dest = root,
  header = '// Automatically generated by Prisma SDL\n',
  fileTypes = ['d.ts', 'js'],
}: Options = {}): ReturnObj[] {
  const utilTypes = [TS_UTILITIES]

  console.log('Searching', root, 'for schemas')
  const schemas = getSchemas(root)

  const singleMode = schemas.length === 1 && !schemas[0]?.name

  const generatedSchemas = schemas.map((schema) => {
    const models = getModels(schema, singleMode, fileTypes)
    return {
      models,
      schema,
      resolvers: Object.fromEntries(fileTypes.map((ext) => [ext, allResolvers(schema, models, singleMode, ext)])),
      typeDefs: Object.fromEntries(fileTypes.map((ext) => [ext, allTypeDefs(schema, models, ext)])),
      context: Object.fromEntries(fileTypes.map((ext) => [ext, gqlContext(schema, singleMode, ext)])),
    }
  })

  if (dest) {
    console.log('Writing files to', dest)
    fileTypes.forEach((ext) => {
      writeSafe(ext === 'js' ? `"use strict";\n${ES5_MODULE}\n` : utilTypes.join('\n'), `utilTypes.${ext}`, dest)
    })
    generatedSchemas.map((schema) => writeFiles(dest, header.endsWith('\n') ? header : `${header}\n`, schema, fileTypes))
  }
  return generatedSchemas
}

prismaSdl({ dest: 'generated', fileTypes: ['d.ts', 'js', 'ts'] })
