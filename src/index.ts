import { getModels } from './services/getModels'
import { getSchemas } from './services/getSchemas'
import { templater } from './services/templater'
import { writeFiles } from './services/writeFiles'
import { gqlContext } from './templates/context/context'
import { allResolvers } from './templates/resolvers/resolvers'
import { allTypeDefs } from './templates/typeDefs/typeDefs'
import type { Options, ReturnObj } from './assets/types'

export * from './assets/types'

export function prismaSdl({
  root = process.cwd(),
  dest = root,
  tscClient = '',
  tscServer = '',
  header = '// Automatically generated by Prisma SDL\n',
  fileTypes = ['d.ts', 'js'],
}: Options = {}): ReturnObj[] {
  console.time('Generating files...')
  const addLine = header.endsWith('\n') ? header : `${header}\n`
  const safeHeader = addLine.startsWith('//') ? addLine : `// ${addLine}`

  const internalFileTypes: Options['fileTypes'] =
    (tscClient || tscServer) && !fileTypes.includes('ts')
      ? [...fileTypes, 'ts']
      : fileTypes

  console.log('Searching', root)
  const schemas = getSchemas(root)

  const singleMode = schemas.length === 1 && !schemas[0]?.name

  const generatedSchemas: ReturnObj[] = schemas.map((schema) => {
    const models = getModels(schema, singleMode, internalFileTypes)
    return {
      models,
      schema,
      resolvers: Object.fromEntries(
        internalFileTypes.map((ext) => [
          ext,
          templater(allResolvers(ext), schema, singleMode, models),
        ]),
      ),
      typeDefs: Object.fromEntries(
        internalFileTypes.map((ext) => [
          ext,
          templater(allTypeDefs(ext), schema, singleMode, models),
        ]),
      ),
      context: Object.fromEntries(
        internalFileTypes.map((ext) => [
          ext,
          templater(gqlContext(ext), schema, singleMode, models),
        ]),
      ),
    }
  })

  if (dest) {
    console.log('Writing files to', dest)
    generatedSchemas.forEach((schema) =>
      writeFiles(schema, {
        root,
        tscClient,
        tscServer,
        dest,
        header: safeHeader,
        fileTypes,
        internalFileTypes,
      }),
    )
  }
  console.timeEnd('Generating files...')
  return generatedSchemas
}
